// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Các mô hình dữ liệu

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  phone          String           @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  role           Role             @default(CUSTOMER)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  driver         Driver?
  bookings       Booking[]
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Driver {
  id          String   @id @default(cuid())
  userId      String   @unique
  licenseId   String   @unique
  licenseType String
  experience  Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  vehicle     Vehicle?
  trips       Trip[]
}

model Vehicle {
  id           String   @id @default(cuid())
  licensePlate String   @unique
  model        String
  capacity     Int
  driverId     String   @unique
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  driver       Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade)
  trips        Trip[]
}

model Route {
  id          String   @id @default(cuid())
  name        String
  startPoint  String
  endPoint    String
  distance    Float
  duration    Int // phút
  basePrice   Float
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  trips       Trip[]
}

model Trip {
  id        String    @id @default(cuid())
  routeId   String
  vehicleId String
  driverId  String
  date      DateTime
  startTime DateTime
  endTime   DateTime?
  status    TripStatus @default(SCHEDULED)
  seats     Int // số chỗ trống
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  route     Route     @relation(fields: [routeId], references: [id])
  vehicle   Vehicle   @relation(fields: [vehicleId], references: [id])
  driver    Driver    @relation(fields: [driverId], references: [id])
}

model Booking {
  id               String        @id @default(cuid())
  tripId           String
  userId           String
  pickupLocation   String
  dropoffLocation  String
  price            Float
  discount         Float         @default(0)
  finalPrice       Float
  status           BookingStatus @default(PENDING)
  paymentStatus    PaymentStatus @default(UNPAID)
  paymentMethod    PaymentMethod?
  passengers       Int           @default(1)
  specialRequests  String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  trip             Trip          @relation(fields: [tripId], references: [id])
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Các enum

enum Role {
  ADMIN
  DRIVER
  CUSTOMER
}

enum TripStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  MOMO
  VNPAY
}
